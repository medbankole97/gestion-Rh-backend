generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  fullname       String        @db.VarChar(100)
  email          String        @unique @db.VarChar(100)
  password       String        @db.VarChar(100)
  createdate     DateTime
  role           String        @db.VarChar(100)
  status         String        @db.VarChar(50)
  employeeId     Int
  employee       Employee      @relation(fields: [employeeId], references: [id])
  timeTrackings  TimeTracking[]
  typeLeaves     TypeLeave[]
  requestLeaves  RequestLeave[]

  @@map("users")
}

model TypeLeave {
  id             Int            @id @default(autoincrement())
  name           String         @db.VarChar(100)
  description    String        
  status         String         @db.VarChar(50)
  userId         Int?           
  user           User?          @relation(fields: [userId], references: [id])
  requestLeaves  RequestLeave[]

  @@map("typeleaves")
}

model Employee {
  id             Int            @id @default(autoincrement())
  fullname       String         @db.VarChar(100)
  date_hiring    DateTime
  position       String         @db.VarChar(50)
  address        String
  phone          String         @db.VarChar(30)
  status         String         @db.VarChar(50)
  users          User[]
  timeTrackings  TimeTracking[]
  requestLeaves  RequestLeave[]

  @@map("employees")
}

model TimeTracking {
  id             Int            @id @default(autoincrement())
  checkin_time   DateTime
  checkout_time  DateTime?    
  employeeId     Int
  employee       Employee       @relation(fields: [employeeId], references: [id])
  userId         Int
  user           User           @relation(fields: [userId], references: [id])

  @@map("timetrackings")
}

model RequestLeave {
  id             Int            @id @default(autoincrement())
  start_date     DateTime
  end_date       DateTime
  motif          String
  typeLeaveId    Int
  employeeId     Int
  userId         Int
  typeLeave      TypeLeave      @relation(fields: [typeLeaveId], references: [id])
  employee       Employee       @relation(fields: [employeeId], references: [id])
  user           User           @relation(fields: [userId], references: [id])

  @@map("requestleaves")
}
